{
  "name": "Pyzza",
  "tagline": "making a pizza with tkinter",
  "body": "#Python Pizza worksheet\r\n\r\n***\r\n\r\n##Task 1 - Why Python?\r\n\r\n* one of the top two languages in the world, javascript for the web 'front end', python for everything else (almost). \r\n  * it is used by NASA, Google, Gimp, Minecraft, and Microsoft Office. \r\n* my project has a million lines of Ada & C, and 3 million lines of Python to prove it!\r\n\r\n**Python can be run from the command line, from an desktop IDE, or from an online IDE** \r\n\r\nIt is useful to try all of them to find out which you prefer.\r\n\r\n**Start a command line prompt using ```cmd```**\r\n\r\n* You can find out the version of python by typing ```python --version```.\r\n  * 2.7.x means you have Python 2 installed\r\n  * 3.5.x means you have Python 3 installed\r\n\r\n**Type ```python``` to give the ```>>>``` prompt**\r\n\r\n* Python is now running!\r\n\r\n***\r\n\r\n##Task 2 - Batteries included\r\n\r\n**Everything in Python is an ```object```, with a uniform interface.**\r\n\r\nWhich means everything you make comes with functions built in, and anything you might like to try probably has a library to help.\r\n\r\nYou already know about ```classes``` and ```objects```, just not in a programming sense: \r\n* *you* are an instance of the class `boy` or of the class `girl`, \r\n* *you* come with a bunch of attributes that you can do just like every other boy or girl, \r\n* and *you* have attributes special to you - called ```overriding```.\r\n  * an object is an instance of a class, where an class is some sort of abstraction of a category of things!\r\n\r\n**You have spent all your school life writing and so have expectations about what character strings can do.**\r\n\r\nLet's play with your name:\r\n\r\n```\r\nname = \"your name\"\r\n```\r\n\r\n**```\"your name\"``` is a string that we have labelled ```name```**\r\n\r\nAs a string object, it comes with methods and attributes:\r\n```\r\n\"your name\".capitalize()\r\n```\r\n\r\nGives the same result as \r\n```\r\nname.capitalize()\r\n```\r\n\r\nYou can also count letters:\r\n\r\n```\r\nlen(\"your name\")\r\n```\r\n\r\nOr talk about the n'th character:\r\n\r\n```\"your name\"[3]```\r\n\r\nArray indexing is interesting in Python, so you can do this:\r\n\r\n```\"your name\"[0:3:1]```\r\n\r\nWhere:\r\n* 0 is the start\r\n* 3 is the end\r\n* 1 is the step length\r\n\r\nWhat does ```\"your name\"[::-1]``` do?\r\n\r\n\r\n**Things in Python have behaviour defined by Python, by the package it belongs to, and by programs that you write.**\r\n\r\n***\r\n\r\n##Task 3 - A graphics app\r\n\r\nThere are lots of graphics packages for Python, \r\n* Tkinter is one of the oldest. \r\n* The name ```Tkinter``` is the Python interface to Tk, a cross-platform graphics toolkit, embedded in many applications, from engineering and design to office applications.\r\n\r\n* *This is a basic Tkinter template for making a graphics app:**\r\n  * import the libraries\r\n  * create the top level object\r\n  * attach a canvas\r\n  * draw things\r\n  * pack the canvas\r\n  * run the mainloop\r\n\r\n*Some of the steps may be hidden by the package, but it is useful to keep remembering the basic template*\r\n\r\nHere is some code to make a basic Python pizza:\r\n\r\n```python\r\n# import libraries\r\nfrom Tkinter import * \r\n\r\n# create the top level Tk object\r\nwindow=Tk()\r\nwindow.title(\"a window\")\r\n\r\n# create the canvas\r\ncanvas = Canvas(window, height=600, width=600)\r\n\r\n# draw stuff on the canvas\r\n# first the pizza base\r\ncanvas.create_oval(200,200,300,300,fill=\"brown\")\r\n\r\n# draw some more stuff\r\n# this might be the tomato sauce toppings\r\n# now add your cheese and anything else, before we get to the pepperoni\r\n\r\n# pack the canvas and run the Tk mainloop\r\ncanvas.pack()\r\nwindow.mainloop()\r\n```\r\n\r\n***\r\n\r\n##Task 4 - Running and saving your work\r\n\r\nFiles and IDEs allow you to save your work, and let you run it at the press of a key.\r\n\r\nFor PyScripter: \r\n\r\n* click *run* at the top left - did you get what you expected?\r\n  * press this every time you want to see what your code does \r\n  * this should then appear in modal form labelled 'Tk'\r\n\r\n* click *save* at the top left - no URL this time :/\r\n  * the first time you will need to give a file name\r\n  * save the file to a memory stick if you need to transport it\r\n\r\n***\r\n\r\n##Task 6 - Things to add to your Pizza\r\n\r\n* Making the base\r\n  * Note - the numbers give a bounding box for the oval\r\n\r\n```python\r\ncanvas.create_oval(50,50,450,450,fill=\"brown\")\r\n```\r\n  \r\n* Putting tomato sauce on the base\r\n  * Note - there is no opacity in a tk canvas, so the layers are important\r\n\r\n```python\r\ncanvas.create_oval(65,65,435,435,fill=\"red\")\r\n```\r\n\r\n***\r\n\r\n##Task 7 - Random toppings\r\n\r\n* look up what other toppings, we can have more shapes and colours\r\n  * http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html\r\n\r\n* we can also add them in random places, try this for pepperoni!\r\n\r\n```python\r\ncolours = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\"]\r\n\r\n# create some pepperoni - random 3 places\r\nfor x in range(15):\r\n    rndX = randint(0,600)\r\n    rndY = randint(0,400)\r\n    rndCol = randint(0, (len(colours)-1))\r\n    canvas.create_oval(rndX,rndY,rndX+50,rndY+50,fill=colours[rndCol])\r\n\r\n```\r\n\r\nPro Tip - put the drawing things all together and change the magic numbers for variables\r\n\r\n##Task 8 - Good programming style\r\n\r\n* To program like a Pythonista\r\n  * make variables instead of the magic numbers\r\n\r\n***\r\n\r\nRemember to save your file and put it on a memory stick - we will be animating our pizza next week!\r\n\r\n\r\n \r\nJohn Reeves\r\n\r\njohn@de-velopment.com\r\nwww.programming-uk.com\r\nwww.twitter.com/programming_uk\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}